apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: build-and-deploy-template
  namespace: argo
spec:
  serviceAccountName: argo
  entrypoint: build-and-deploy
  imagePullSecrets:
  - name: docker-credentials
  arguments:
    parameters:
    - name: docker-username
      value: "achodak"
    - name: app-git-repo
      value: "https://github.com/chaladak/fileprocessing-app.git"
    - name: infra-git-repo
      value: "https://github.com/chaladak/fileprocessing-infra.git"
    - name: infra-git-branch
      value: "main"
    - name: git-commit
      value: "latest"
    - name: git-branch
      value: "refs/heads/main"
  templates:
  - name: build-and-deploy
    steps:
    # Build all services in parallel
    - - name: build-api-service
        template: docker-build
        arguments:
          parameters:
          - name: service-path
            value: "api_service"
          - name: image-name
            value: "fileprocessing-api"
          - name: tag
            value: "{{workflow.uid}}"
      - name: build-processor-service
        template: docker-build
        arguments:
          parameters:
          - name: service-path
            value: "processor_service"
          - name: image-name
            value: "fileprocessing-processor"
          - name: tag
            value: "{{workflow.uid}}"
      - name: build-notification-service
        template: docker-build
        arguments:
          parameters:
          - name: service-path
            value: "notification_service"
          - name: image-name
            value: "fileprocessing-notifier"
          - name: tag
            value: "{{workflow.uid}}"
    # Run tests for all services in parallel
    - - name: test-api-service
        template: run-tests
        arguments:
          parameters:
          - name: service-path
            value: "api_service"
          - name: test-file
            value: "test_api.py"
      - name: test-processor-service
        template: run-tests
        arguments:
          parameters:
          - name: service-path
            value: "processor_service"
          - name: test-file
            value: "test_processor.py"
      - name: test-notification-service
        template: run-tests
        arguments:
          parameters:
          - name: service-path
            value: "notification_service"
          - name: test-file
            value: "test_notifier.py"
    # Update infra repository and trigger Argo CD sync
    - - name: update-infra-and-sync
        template: update-infra
        arguments:
          parameters:
          - name: api-image
            value: "{{workflow.parameters.docker-username}}/fileprocessing-api:{{workflow.uid}}"
          - name: processor-image
            value: "{{workflow.parameters.docker-username}}/fileprocessing-processor:{{workflow.uid}}"
          - name: notifier-image
            value: "{{workflow.parameters.docker-username}}/fileprocessing-notifier:{{workflow.uid}}"
  - name: docker-build
    inputs:
      parameters:
      - name: service-path
      - name: image-name
      - name: tag
    container:
      image: docker:20.10.7-dind
      command: [sh, -c]
      env:
      - name: DOCKER_USERNAME
        value: "{{workflow.parameters.docker-username}}"
      - name: DOCKER_PASSWORD
        valueFrom:
          secretKeyRef:
            name: docker-credentials
            key: docker-password
      - name: DOCKER_BUILDKIT
        value: "1"
      - name: BUILDKIT_PROGRESS
        value: "plain"
      args:
      - |
        set -e
        dockerd \
          --host=unix:///var/run/docker.sock \
          --default-ulimit nofile=65536:65536 \
          --max-concurrent-downloads 3 \
          --max-concurrent-uploads 3 &
        timeout=60
        while ! docker info >/dev/null 2>&1; do
          if [ $timeout -le 0 ]; then
            echo "Docker daemon failed to start"
            exit 1
          fi
          sleep 2
          timeout=$((timeout-2))
        done
        echo "Docker daemon started successfully"
        apk add --no-cache git
        echo "Cloning app repository..."
        git clone {{workflow.parameters.app-git-repo}} /workspace
        cd /workspace
        if [ "{{workflow.parameters.git-commit}}" != "latest" ]; then
          echo "Checking out commit: {{workflow.parameters.git-commit}}"
          git checkout {{workflow.parameters.git-commit}}
        fi
        if [ ! -d "./{{inputs.parameters.service-path}}" ]; then
          echo "Error: Service directory ./{{inputs.parameters.service-path}} not found"
          ls -la
          exit 1
        fi
        if [ ! -f "./{{inputs.parameters.service-path}}/Dockerfile" ]; then
          echo "Error: Dockerfile not found in ./{{inputs.parameters.service-path}}"
          ls -la ./{{inputs.parameters.service-path}}/
          exit 1
        fi
        echo "Logging into Docker Hub..."
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        echo "Building image for {{inputs.parameters.service-path}}..."
        docker build \
          --no-cache \
          --progress=plain \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          -t $DOCKER_USERNAME/{{inputs.parameters.image-name}}:{{inputs.parameters.tag}} \
          -t $DOCKER_USERNAME/{{inputs.parameters.image-name}}:latest \
          ./{{inputs.parameters.service-path}}
        echo "Pushing images..."
        docker push $DOCKER_USERNAME/{{inputs.parameters.image-name}}:{{inputs.parameters.tag}}
        docker push $DOCKER_USERNAME/{{inputs.parameters.image-name}}:latest
        echo "Build and push completed successfully"
      securityContext:
        privileged: true
      resources:
        requests:
          memory: "2Gi"
          cpu: "1000m"
        limits:
          memory: "4Gi"
          cpu: "2000m"
  - name: run-tests
    inputs:
      parameters:
      - name: service-path
      - name: test-file
    container:
      image: python:3.9
      command: [sh, -c]
      env:
      - name: PYTHONPATH
        value: "/workspace"
      - name: POSTGRES_USER
        value: "test"
      - name: POSTGRES_PASSWORD
        value: "test"
      - name: POSTGRES_HOST
        value: "localhost"
      - name: POSTGRES_DB
        value: "test"
      - name: RABBITMQ_URL
        value: "amqp://guest:guest@localhost:5672/%2F"
      - name: TESTING
        value: "true"
      args:
      - |
        set -e
        # Install git and SQLite dependencies using apt-get (Debian-based image)
        apt-get update && apt-get install -y git sqlite3 libsqlite3-dev
        echo "Cloning app repository..."
        git clone {{workflow.parameters.app-git-repo}} /workspace
        cd /workspace
        if [ "{{workflow.parameters.git-commit}}" != "latest" ]; then
          echo "Checking out commit: {{workflow.parameters.git-commit}}"
          git checkout {{workflow.parameters.git-commit}}
        fi
        if [ ! -d "./{{inputs.parameters.service-path}}" ]; then
          echo "Error: Service directory ./{{inputs.parameters.service-path}} not found"
          ls -la
          exit 1
        fi
        if [ ! -f "./{{inputs.parameters.service-path}}/tests/{{inputs.parameters.test-file}}" ]; then
          echo "Error: Test file {{inputs.parameters.service-path}}/tests/{{inputs.parameters.test-file}} not found"
          ls -la {{inputs.parameters.service-path}}/tests/
          exit 1
        fi
        cd /workspace
        python -m venv venv
        . venv/bin/activate
        # Install requirements for the service
        if [ -f "{{inputs.parameters.service-path}}/requirements.txt" ]; then
          pip install -r {{inputs.parameters.service-path}}/requirements.txt
        fi
        # Install test-specific requirements if available
        if [ -f "{{inputs.parameters.service-path}}/tests/requirements.txt" ]; then
          pip install -r {{inputs.parameters.service-path}}/tests/requirements.txt
        fi
        # Ensure pytest and dependencies are installed
        pip install pytest pytest-mock sqlalchemy>=2.0
        echo "Running tests for {{inputs.parameters.service-path}}..."
        pytest {{inputs.parameters.service-path}}/tests/{{inputs.parameters.test-file}} --verbose
        echo "Tests completed successfully"
      resources:
        requests:
          memory: "1Gi"
          cpu: "500m"
        limits:
          memory: "2Gi"
          cpu: "1000m"
  - name: update-infra
    inputs:
      parameters:
      - name: api-image
      - name: processor-image
      - name: notifier-image
    container:
      image: alpine/git:2.36.2
      command: [sh, -c]
      env:
      - name: GIT_USERNAME
        value: "{{workflow.parameters.docker-username}}"
      - name: GIT_TOKEN
        valueFrom:
          secretKeyRef:
            name: git-credentials
            key: git-token
      args:
      - |
        set -e
        git config --global user.name "Argo Workflow"
        git config --global user.email "argo@workflow.com"
        echo "Cloning infra repository..."
        git clone https://$GIT_USERNAME:$GIT_TOKEN@github.com/chaladak/fileprocessing-infra.git /fileprocessing-infra
        cd /fileprocessing-infra
        git checkout {{workflow.parameters.infra-git-branch}}
        API_TAG=$(echo "{{inputs.parameters.api-image}}" | sed 's|.*:||')
        PROCESSOR_TAG=$(echo "{{inputs.parameters.processor-image}}" | sed 's|.*:||')
        NOTIFIER_TAG=$(echo "{{inputs.parameters.notifier-image}}" | sed 's|.*:||')
        echo "Updating image tags in kustomization.yaml..."
        sed -i "/name: achodak\/fileprocessing-api/,/newTag:/ s|newTag: .*|newTag: $API_TAG|" deploy/overlays/dev/kustomization.yaml
        sed -i "/name: achodak\/fileprocessing-notifier/,/newTag:/ s|newTag: .*|newTag: $NOTIFIER_TAG|" deploy/overlays/dev/kustomization.yaml
        sed -i "/name: achodak\/fileprocessing-processor/,/newTag:/ s|newTag: .*|newTag: $PROCESSOR_TAG|" deploy/overlays/dev/kustomization.yaml
        git add .
        git commit -m "Update image tags to {{workflow.uid}} - triggered by commit {{workflow.parameters.git-commit}}"
        git push origin {{workflow.parameters.infra-git-branch}}