apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  labels:
    app: api
spec:
  replicas: 1  # Starting with 1 replica to avoid PVC conflicts
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
      - name: api
        image: achodak/fileprocessing-api:latest  # Will be updated through kustomize
        ports:
        - containerPort: 8000  # Using your original port
        envFrom:
        - configMapRef:
            name: fileprocessing-config  # Using your ArgoCD config name
        env:
        - name: MINIO_ACCESS_KEY  # Renamed from S3_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: fileprocessing-secrets
              key: minio-access-key
        - name: MINIO_SECRET_KEY  # Renamed from S3_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: fileprocessing-secrets
              key: minio-secret-key
        volumeMounts:
        - name: shared-data
          mountPath: /app/data
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "200m"
            memory: "256Mi"
        readinessProbe:
          httpGet:
            path: /health
            port: 8000  # Updated port
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 8000  # Updated port
          initialDelaySeconds: 15
          periodSeconds: 20
      imagePullSecrets:
      - name: dockerhub-secret  # Keeping your pull secret
      volumes:
      - name: shared-data
        persistentVolumeClaim:
          claimName: nfs-pvc  # Using your original PVC name
---
apiVersion: v1
kind: Service
metadata:
  name: api-service
spec:
  selector:
    app: api
  ports:
  - port: 80  # External service port
    targetPort: 8000  # Container port
  type: ClusterIP